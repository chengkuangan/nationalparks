#!groovy

// Important
// Remember to ensure that the Project version information is on top of the pom.xml file because
// the getVersionFromPom will attempt to read the version information that it encounter at the
// first occurance.

node('maven') {


  def mvnCmd = "mvn -s ./nexus_openshift_settings.xml"
  def nexusReleaseURL = "http://nexus3:8081/repository/releases"
  def activeSvc = ""
  
  
  stage('Checkout Source') {
    checkout scm
  }

def groupId    = getGroupIdFromPom("pom.xml")
  def artifactId = getArtifactIdFromPom("pom.xml")
  def version    = getVersionFromPom("pom.xml")  
  
  
  stage('Build jar') {
    sh "${mvnCmd} package -DskipTests=true"
  }

}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}

def getGeneratedPackageName(groupId, artifactId, version){
    String warFileName = "${groupId}.${artifactId}"
    warFileName = warFileName.replace('.', '/')
    "${warFileName}/${version}/${artifactId}-${version}.jar"
}

def verifyNationalparksDB(url){
    echo "URL: $url"
    def count = sh script: "curl -s $url | grep \"Hwange National Park Airport\" | wc -l | tr -d \"\n\"", returnStatus: true
    if (count == "0") {
        error("Build failed: nationalparks does not return expected query result. Please check database connection.")
    }
}
